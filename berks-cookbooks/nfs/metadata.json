{
  "name": "nfs",
  "description": "Installs and configures NFS, and NFS exports",
  "long_description": "NFS\n---\n\n[![Build Status](https://secure.travis-ci.org/atomic-penguin/cookbook-nfs.png?branch=master)](http://travis-ci.org/atomic-penguin/cookbook-nfs)\n\nDescription\n-----------\n\nInstalls and configures NFS client, or server components \n\nRequirements\n------------\n\nShould work on any RHEL, Debian, Ubuntu, SUSE, and FreeBSD distributions.\n\nThis cookbook depends on Sean O'Meara's [line cookbook](https://github.com/someara/line-cookbook)\n\n### Attributes\n\n* `nfs['packages']`\n  - Case switch in attributes to choose NFS client packages dependent on platform.\n\n* `nfs['service']`\n  - `['portmap']` - the portmap or rpcbind service depending on platform\n  - `['lock']` - the statd or nfslock service depending on platform\n  - `['server']` - the server component, nfs or nfs-kernel-server depending on platform\n  - `['idmap']` - the NFSv4 idmap component\n\n* `nfs['service_provider']`\n  - NOTE: This is a hack to set the service provider explicitly to Upstart on Ubuntu platforms.\n  - `['portmap']` - provider for portmap service, chosen by platform\n  - `['lock']` - provider for lock service, chosen by platform\n  - `['server']` - provider for server service, chosen by platform\n  - `['idmap']` - provider for NFSv4 idmap service\n\n* `nfs['config']`\n  - `client_templates` - templates to iterate through on client systems, chosen by platform\n  - `server_template` - Per-platform case switch in common nfs.erb template.  This string should be\n     set to where the main NFS server configuration file should be placed.\n  - `idmap_template` - Path to idmapd.conf used in `nfs::client4` and `nfs::server4` recipes.\n\n* `nfs['threads']` - Number of nfsd threads to run.  Default 8 on Linux, 24 on FreeBSD.  Set to 0, to disable.\n\n* `nfs['port']`\n  - `['statd']` = Listen port for statd, default 32765\n  - `['statd_out']` = Outgoing port for statd, default 32766\n  - `['mountd']` = Listen port for mountd, default 32767\n  - `['lockd']` = Listen port for lockd, default 32768\n\n* `nfs['v2']`, `nfs['v3']`, `nfs['v4']`\n  - Set to `yes` or `no` to turn on/off NFS protocol level v2, or v3.\n  - Defaults to nil, deferring to the default behavior provided by running kernel. \n\n* `nfs['mountd_flags']` - BSD launch options for mountd.\n  `nfs['server_flags']` - BSD launch options for nfsd.\n\n* `nfs['idmap']`\n   - Attributes specific to idmap template and service.\n   - `['domain']` - Domain for idmap service, defaults to `node['domain']`\n   - `['pipefs_directory']` - platform-specific location of `Pipefs-Directory`\n   - `['user']` - effective user for idmap service, default `nobody`.\n   - `['group']` - effective group for idmap service, default `nogroup`.\n\n## Usage\n\nTo install the NFS components for a client system, simply add nfs to the run\\_list.\n\n    name \"base\"\n    description \"Role applied to all systems\"\n    run_list [ \"nfs\" ]\n\nThen in an `nfs_server.rb` role that is applied to NFS servers:\n\n    name \"nfs_server\"\n    description \"Role applied to the system that should be an NFS server.\"\n    override_attributes(\n      \"nfs\" => {\n        \"packages\" => [ \"portmap\", \"nfs-common\", \"nfs-kernel-server\" ],\n        \"port\" => {\n          \"statd\" => 32765,\n          \"statd_out\" => 32766,\n          \"mountd\" => 32767,\n          \"lockd\" => 32768\n        }\n      }\n    )\n    run_list [ \"nfs::server\" ]\n\n### `nfs_export` LWRP Usage\n\nApplications or other cookbooks can use the nfs\\_export LWRP to add exports:\n\n    nfs_export \"/exports\" do\n      network '10.0.0.0/8'\n      writeable false \n      sync true\n      options ['no_root_squash']\n    end\n\nThe default parameters for the `nfs_export` LWRP are as follows\n\n* directory \n  - directory you wish to export\n  - defaults to resource name\n\n* network\n  - a CIDR, IP address, or wildcard (\\*)\n  - requires an option\n  - can be a string for a single address or an array of networks\n\n* writeable\n  - ro/rw export option\n  - defaults to false\n\n* sync\n  - synchronous/asynchronous export option\n  - defaults to true\n\n* anonuser\n  - user mapping for anonymous users\n  - the user's UID will be retrieved from /etc/passwd for the anonuid=x option\n  - defaults to nil (no mapping)\n\n* anongroup\n  - group mapping for anonymous users\n  - the group's GID will be retrieved from /etc/group for the anongid=x option\n  - defaults to nil (no mapping)\n\n* options\n  - additional export options as an array, excluding the parameterized sync/async, ro/rw options, and anoymous mappings\n  - defaults to `root_squash`\n\n## nfs::default recipe\n\nThe default recipe installs and configures the common components for an NFS client, at an effective protocol level of\nNFSv3.  The Chef resource logic for this is in the `nfs::_common` recipe, with platform-specific conditional defaults\nset in the default attributes file.\n\n## nfs::client4 recipe\n\nIncludes the logic from `nfs::_common`, and also configures and installs the idmap service to provide an effective protocol\nlevel of NFSv4.  Effectively the same as running both `nfs::_common` and `nfs::_idmap`.\n\n## nfs::server recipe\n\nThe server recipe includes the common client components from `nfs::_common`.  This also configures and installs the\nplatform-specific server services for an effective protocol level of NFSv3.\n\n## nfs::server4 recipe\n\nThis recipe includes the common client components from `nfs::_common`.  It also configures and installs the\nplatform-specific server servcies for an effective protocol level of NFSv4.  Effectively the same as running\n`nfs::_common` and `nfs::_idmap` and `nfs::server`.\n\n## nfs::undo recipe\n\nDoes your freshly kickstarted/preseeded system come with NFS, when you didn't ask for NFS?  This recipe inspired by the\nannoyances cookbook, will run once to remove NFS from the system.  Use a knife command to remove NFS components from your\nsystem like so.\n\n    knife run_list add <node name> nfs::undo\n\n## License and Author\n\nAuthor: Eric G. Wolfe (eric.wolfe@gmail.com) [![endorse](https://api.coderwall.com/atomic-penguin/endorsecount.png)](https://coderwall.com/atomic-penguin)\nContributors: Riot Games, Sean OMeara\n\nCopyright 2011-2014, Eric G. Wolfe\nCopyright 2012, Riot Games\nCopyright 2012, Sean OMeara\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "Eric G. Wolfe",
  "maintainer_email": "eric.wolfe@gmail.com",
  "license": "Apache 2.0",
  "platforms": {
    "ubuntu": ">= 0.0.0",
    "debian": ">= 0.0.0",
    "redhat": ">= 0.0.0",
    "centos": ">= 0.0.0",
    "fedora": ">= 0.0.0",
    "scientific": ">= 0.0.0",
    "amazon": ">= 0.0.0",
    "oracle": ">= 0.0.0",
    "sles": ">= 0.0.0",
    "freebsd": ">= 0.0.0"
  },
  "dependencies": {
    "line": ">= 0.0.0",
    "sysctl": ">= 0.0.0"
  },
  "recommendations": {

  },
  "suggestions": {

  },
  "conflicting": {

  },
  "providing": {

  },
  "replacing": {

  },
  "attributes": {

  },
  "groupings": {

  },
  "recipes": {

  },
  "version": "2.2.5",
  "source_url": "",
  "issues_url": ""
}
